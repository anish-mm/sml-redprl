structure Ast = RedPrlAst
structure Ar = RedPrlArity
structure Vl = Ar.Vl

open Ast

structure E = RedPrlError

structure O = RedPrlOpData
structure AJ = RedPrlAtomicJudgment

structure TP = TermPrinter

val ppIntInf = Fpp.text o IntInf.toString

fun makeCustom (opid, bindings) =
  Ast.$$ (O.CUST (opid, NONE), bindings)

fun makeDim pos : IntInf.int -> ast =
  fn 0 => Ast.$$ (O.DIM0, [])
   | 1 => Ast.$$ (O.DIM1, [])
   | i => E.raiseAnnotatedError (pos, E.INVALID_DIMENSION (ppIntInf i))

structure Tac =
struct
  infix $$ $ \

  fun makeSeq mt (us : (string * O.sort) list) mt' =
    let
      val (syms, sorts) = ListPair.unzip us
    in
      O.MTAC_SEQ sorts $$ [[] \ mt, syms \ mt']
    end

  fun multitacToTac mt =
    case out mt of
       O.MTAC_ALL $ [_ \ t] => t
     | _ => setAnnotation (getAnnotation mt) (O.TAC_MTAC $$ [[] \ mt])

  fun tacToMultitac t =
    case out t of
       O.TAC_MTAC $ [_ \ mt] => mt
     | _ => setAnnotation (getAnnotation t) (O.MTAC_ALL $$ [[] \ t])

  fun orElse (t1, t2) =
    multitacToTac (O.MTAC_ORELSE $$ [[] \ tacToMultitac t1, [] \ tacToMultitac t2])

  fun then_ (t1, t2) =
    multitacToTac (makeSeq (tacToMultitac t1) [] (tacToMultitac t2))

  val autoMtac = O.MTAC_AUTO $$ []
  val autoTac = multitacToTac autoMtac

  fun exact m =
    O.RULE_EXACT $$ [[] \ m]

  fun exactAuto m =
    then_ (exact m, autoTac)

  fun makeMatch term clauses = 
    let
      fun makeClause t1 t2 = O.DEV_MATCH_CLAUSE $$ [[] \ t1, [] \ t2]
      val clauseArgs = List.map (fn (xs, (t1, t2)) => xs \ makeClause t1 t2) clauses
      val ns = List.map (List.length o #1) clauses
    in
      O.DEV_MATCH ns $$ ([] \ term) :: clauseArgs
    end
end

structure Multi =
struct
  infix $$ $ \

  val addUnderscores = List.map (fn SOME x => x | NONE => "_")

  fun makeLam [] m = m
    | makeLam (x::xs) m = O.LAM $$ [[Option.getOpt (x, "_")] \ makeLam xs m]

  fun makeApp m ns =
    List.foldl (fn (n, app) => O.APP $$ [[] \ app, [] \ n]) m ns

  fun makePathAbs [] m = m
    | makePathAbs (u::us) m = O.PATH_ABS $$ [[Option.getOpt (u, "_")] \ makePathAbs us m]

  fun makePathApp m ns =
    List.foldl (fn (r, app) => O.PATH_APP $$ [[] \ app, [] \ r]) m ns

  fun makeNum i =
    case IntInf.compare (i, 0) of
      GREATER => O.SUCC $$ [[] \ makeNum (i - 1)]
    | EQUAL => O.ZERO $$ []
    | LESS => O.NEGSUCC $$ [[] \ makeNum ((~ i) - 1)]

  fun flatten xsys =
    List.concat (List.map (fn (xs, y) => List.map (fn x => (x, y)) xs) xsys)

  fun makeQuant opr [] cod = cod
    | makeQuant opr ((x, a) :: doms) cod =
       opr $$ [[] \ a, [Option.getOpt (x, "_")] \ makeQuant opr doms cod]

  val makeFun = makeQuant O.FUN o flatten

  structure LabelSet = SplaySet (structure Elem = StringOrdered)


  fun checkNoDuplicates pos lbls =
    let
      fun insert (lbl, set) =
        if LabelSet.member set lbl then
          E.raiseAnnotatedError (pos, E.GENERIC [Fpp.text "Duplicate label", Fpp.text lbl])
        else
          LabelSet.insert set lbl
    in
      List.foldl insert LabelSet.empty lbls;
      ()
    end

  fun anonRecordLabelForIndex i =
    "proj" ^ Int.toString (i + 1)

  fun makeRecordAux pos tbs =
    let
      val fields = ListUtil.mapWithIndex (fn (_, (SOME x, ty)) => (x, ty) | (i, (NONE, ty)) => (anonRecordLabelForIndex i, ty)) (flatten tbs)
      val init = {labels = [], args = []}
      val {labels, args} =
        List.foldl
          (fn ((lbl, ty), {labels, args}) =>
            {labels = labels @ [lbl],
             args = (labels \ ty) :: args})
          init
          fields

      val lbls = labels
      val _ = checkNoDuplicates pos lbls
    in
      (lbls, List.rev args)
    end

  fun makeProd pos (tbs, ty) =
    let
      val (_, args) = makeRecordAux pos (tbs @ [([NONE], ty)])
      val lbls = ListUtil.mapWithIndex (anonRecordLabelForIndex o #1) args
    in
      O.RECORD lbls $$ args
    end

  fun makeRecord pos tbs =
    let
      val (lbls, args) = makeRecordAux pos tbs
    in
      O.RECORD lbls $$ args
    end

  fun makeTuple pos fields =
    let
      val (lbls, args) = ListPair.unzip fields
    in
      checkNoDuplicates pos lbls;
      O.TUPLE lbls $$ List.map (fn a => [] \ a) args
    end

  fun makeAnonymousTuple terms =
    let
      val lbls = ListUtil.mapWithIndex (anonRecordLabelForIndex o #1) terms
    in
      O.TUPLE lbls $$ List.map (fn a => [] \ a) terms
    end

  fun recordIntro pos fields =
    let
      val (lbls, tacs) = ListPair.unzip fields
    in
      checkNoDuplicates pos lbls;
      O.DEV_RECORD_INTRO lbls $$ List.map (fn tac => [] \ tac) tacs
    end


  fun sigmaIntro tacs =
    let
      val lbls = List.tabulate (List.length tacs, anonRecordLabelForIndex)
    in
      O.DEV_RECORD_INTRO lbls $$ List.map (fn tac => [] \ tac) tacs
    end

  fun makeVec tau xs = 
    O.MK_VEC (tau, List.length xs) $$ List.map (fn x => [] \ x) xs
end

structure Pattern =
struct
  infix $$ $ \

  fun labelAnonTuplePattern pats = 
    let
      val lbls = List.tabulate (List.length pats, Multi.anonRecordLabelForIndex)
    in
      ListPair.zip (lbls, pats)
    end

  (* this code is kind of crappy, feel free to improve it *)
  fun unstitchPattern (pat : 'a O.dev_pattern) : unit O.dev_pattern * 'a list =
    case pat of
       O.PAT_VAR a => (O.PAT_VAR (), [a])
     | O.PAT_TUPLE lpats =>
       let
         val (lbls, pats) = ListPair.unzip (List.map (fn (lbl, pat) => (lbl, unstitchPattern pat)) lpats)
         val (pats, names) = ListPair.unzip pats
       in
         (O.PAT_TUPLE (ListPair.zip (lbls, pats)), List.concat names)
       end

  fun makeLambda pats tac =
    let
      val (pats', namess) = ListPair.unzip (List.map unstitchPattern pats)
      val names = List.concat namess
    in
      O.DEV_FUN_INTRO pats' $$ [names \ tac]
    end

  fun makeApplyHyp pat z tacs tac =
    let
      val (pat, names) = unstitchPattern pat
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_APPLY_HYP pat $$ [[] \ z, [] \ vec, names \ tac]
    end

  fun makeUseHyp z tacs = 
    let
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_USE_HYP $$ [[] \ z, [] \ vec]
    end

  fun makeApplyLemma pat (opid, subtermArgs) tacs tac =
    let
      val (pat, names) = unstitchPattern pat
      val vec = Multi.makeVec O.TAC tacs
      val args = subtermArgs @ [[] \ vec, names \ tac]
    in
      O.DEV_APPLY_LEMMA (opid, NONE, pat) $$ args
    end

  fun makeUseLemma (opid, subtermArgs) tacs = 
    let
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_USE_LEMMA (opid, NONE) $$ subtermArgs @ [[] \ vec]
    end

end

structure Jdg = 
struct
  open Ast infix $$ \
  fun makeAtLvl theta (lvl, k : ast) es = 
     theta $$ List.map (fn e => [] \ e) (lvl :: k :: es)
end

%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF

 | VARNAME of string
 | OPNAME of string
 | UNDER
 | NUMERAL of IntInf.int

 | COLON
 (* delimiters *)
 | LANGLE | RANGLE
 | LANGLE_PIPE | RANGLE_PIPE
 | LPAREN | RPAREN
 | RBRACKET | LBRACKET
 | LSQUARE | RSQUARE
 (* (mostly) single-character variables *)
 | BACK_TICK
 | COMMA
 | AMPERSAND
 | DOT
 | EQUALS
 | HASH
 | PERCENT
 | PIPE | DOUBLE_PIPE
 | QUESTION
 | SEMI
 (* arrows *)
 | SQUIGGLE_RIGHT_ARROW | SQUIGGLE_LEFT_ARROW
 | RIGHT_ARROW | LEFT_ARROW
 | DOUBLE_RIGHT_ARROW | LONG_RIGHT_ARROW
 | TRIANGLE_RIGHT
 | PLUS | DOUBLE_PLUS

 (* sorts *)
 | DIM | EXP | TAC | TRV | JDG | LVL | KND


 (* keywords and variables in expressions *)
 | AX
 | FCOM
 | BOOL | TT | FF | IF
 | WBOOL | WIF
 | NAT | ZERO | SUCC | NAT_REC
 | INT | NEGSUCC | INT_REC
 | VOID
 | S1 | BASE | LOOP | S1_REC
 | LAMBDA | DOLLAR_SIGN
 | RECORD | TIMES | TUPLE | BANG
 | PATH | ABS | AT_SIGN
 | PUSHOUT | LEFT | RIGHT | GLUE
 | BOX | CAP
 | V | VIN | VPROJ
 | UNIVERSE
 | HCOM | COE | COM

 | LMAX | LOMEGA

 (* parsing "coercions" *)
 | TACTIC

 (* keywords in tactics *)
 | CASE | OF
 | FRESH
 | LET | USE | WITH
 | THEN | ELSE
 | REFINE
 | MTAC_REC | MTAC_PROGRESS | MTAC_REPEAT | MTAC_AUTO | MTAC_HOLE
 | RULE_ID | RULE_AUTO_STEP | RULE_SYMMETRY | RULE_ELIM | RULE_REWRITE | RULE_REWRITE_HYP | RULE_REDUCE | RULE_UNFOLD
 | RULE_EXACT
 | MATCH
 | QUERY | CONCL
 | PRINT

 (* keywords in judgments *)
 | TRUE | TYPE | SYNTH | AT (* `WITH` is reused *)

 | DISCRETE | KAN | STABLE

 (* commands and declarations *)
 | CMD_PRINT | CMD_EXTRACT
 | DCL_DEF | DCL_TAC | DCL_THM | DCL_RULE
 | BY | IN

%right LEFT_ARROW RIGHT_ARROW DOUBLE_PIPE SEMI
%right TIMES
%nonassoc COMMA AMPERSAND COLON
%nonassoc FCOM BOOL TT FF IF WBOOL WIF NAT ZERO SUCC NAT_REC INT NEGSUCC INT_REC VOID S1 BASE LOOP LAMBDA DOLLAR_SIGN PATH ABS AT_SIGN AX HCOM COE
%nonassoc HASH LANGLE LPAREN VARNAME OPNAME



%nonterm
   start of Signature.src_elt

 | ident of string
 | boundVar of string option
 | boundVars of string option list

 | sort of O.sort
 | sorts of O.sort list

 | bindingSig of O.sort list
 | valence of Ar.valence

   (* parameters *)
 | numAsDimension of ast
 | dimension of ast
 | dimensions of ast list
 | dir of ast * ast
 | backDir of ast * ast
 | equation of ast * ast
 | tube of ast
 | tubes of ast list
 | boundary of ast
 | boundaries of ast list
 | tubeVec of ast
 | boundaryVec of ast

 | metavar of string
 | patvar of string * O.sort
 | patvarBindings of string list
 | customOpTerm of string * ast abs list


 | typedBinder of string option list * ast
 | typedBinders of (string option list * ast) list
 | quantifierData of (string option list * ast) list * ast
 | field of string * ast
 | fields of (string * ast) list

   (* abt abstractions *)
 | binder of string list
 | binding of ast abs
 | bindings of ast abs list

   (* a type-theoretic term *)
 | monoNullaryOperator of operator
 | regularMultinaryOperator of operator
 | rawTermAndTac of ast (* shared with tactics *)
 | rawTerm of ast
 | level of ast
 | levels of ast list

   (* a type-theoretic term, annotated with source position *)
 | term of ast
 | terms of ast list

 | kind of O.K.kind
 | withKindAtLevel of ast * ast

 | rawJudgment of ast
 | judgment of ast

 | src_catjdg of Signature.src_catjdg
 | src_seqhyp of Signature.src_seqhyp
 | src_seqhyps of Signature.src_seqhyp list
 | src_sequent of Signature.src_sequent

 | termAnySort of ast
 | termsAnySort of ast list
 | elimTarget of ast
 | elimTargetAnySort of ast

 | atomicRawTac of ast
 | atomicTac of ast
 | atomicRawMultitac of ast
 | atomicMultitac of ast
 | rawMultitac of ast
 | multitac of ast
 | hypBinding of string * O.sort
 | hypBindings of (string * O.sort) list
 | rawTactic of ast
 | tactic of ast
 | tactics of ast list

 | recordFieldTactics of (string * ast) list

 | devAppSpine of ast list
 | bracketedDevAppSpine of ast list
 | devDecompPattern of string O.dev_pattern
 | devDecompPatterns of string O.dev_pattern list
 | labeledDecompPattern of string * string O.dev_pattern
 | anonTupleDecompPattern of string O.dev_pattern list
 | labeledTupleDecompPattern of (string * string O.dev_pattern) list
 | tupleDecompPattern of (string * string O.dev_pattern) list
 | devMatchClause of string list * (ast * ast)
 | devMatchClauses of (string list * (ast * ast)) list
 | selector of ast
 | selectors of ast list
 | bracketedSelectors of ast list
 | opnames of string list
 | bracketedOpnames of string list

 | declArgument of metavariable * Ar.valence
 | declArguments of string Signature.arguments
 | declArgumentsParens of string Signature.arguments

   (* a declaration, annotated with source position *)
 | decl of string * Signature.src_decl * Pos.t
   (* a RedPRL signature *)
 | rawCmd of Signature.src_cmd
 | cmd of Signature.src_cmd * Pos.t
 | elt of Signature.src_elt

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF DOT
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : elt (elt)

ident
  : OPNAME (OPNAME)
  | VARNAME (VARNAME)

boundVar
  : VARNAME (SOME VARNAME)
  | UNDER (NONE)

boundVars
  : boundVar ([boundVar])
  | boundVar boundVars (boundVar :: boundVars)

sort
  : EXP (O.EXP)
  | TAC (O.TAC)
  | TRV (O.TRV)
  | JDG (O.JDG)
  | LVL (O.LVL)
  | KND (O.KND)
  | DIM (O.DIM)

sorts
  : sort ([sort])
  | sort COMMA sorts (sort :: sorts)
  | ([])

bindingSig
  : LSQUARE sorts RSQUARE DOT (sorts)
  | ([])

valence
  : bindingSig sort ((bindingSig, sort))

numAsDimension
  : NUMERAL (makeDim (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)

dimension
  : VARNAME (`` VARNAME)
  | metavar (Ast.$$# (metavar, []))
  | numAsDimension (numAsDimension)

dimensions
  : dimension dimensions (dimension :: dimensions)
  | dimension ([dimension])

dir
  : dimension SQUIGGLE_RIGHT_ARROW dimension ((dimension1, dimension2))

backDir
  : dimension SQUIGGLE_LEFT_ARROW dimension ((dimension1, dimension2))

equation
  : dimension EQUALS dimension (dimension1, dimension2)

tube
  : LSQUARE equation binding RSQUARE (Ast.$$ (O.MK_TUBE, [\ ([], #1 equation), \ ([], #2 equation), binding]))

boundary
  : LSQUARE equation binding RSQUARE (Ast.$$ (O.MK_BDRY, [\ ([], #1 equation), \ ([], #2 equation), binding]))

tubes
  : tube tubes (tube :: tubes)
  | ([])

boundaries
  : boundary boundaries (boundary :: boundaries)
  | ([])

tubeVec
  : tubes (Multi.makeVec O.TUBE tubes)

boundaryVec
  : boundaries (Multi.makeVec O.BDRY boundaries)

metavar
  : HASH ident (ident)

typedBinder
  : LSQUARE boundVars COLON term RSQUARE ((boundVars, term))

typedBinders
  : typedBinder ([typedBinder])
  | typedBinder typedBinders (typedBinder :: typedBinders)

quantifierData
  : typedBinder quantifierData ((typedBinder :: #1 quantifierData), #2 quantifierData)
  | term quantifierData ((([NONE], term) :: #1 quantifierData), #2 quantifierData)
  | term ([], term)

field
  : LSQUARE ident term RSQUARE (ident, term)

fields
  : field fields (field :: fields)
  | field ([field])

binder
  : LSQUARE boundVars RSQUARE (Multi.addUnderscores boundVars)

binding
  : binder term (\ (binder, term))
  | term (\ ([], term))

bindings
  : binding bindings (binding :: bindings)
  | binding ([binding])


(* built-in nullary operators that take no parameters *)
monoNullaryOperator
  (* axiom *)
  : AX (O.AX)
  (* bools *)
  | BOOL (O.BOOL)
  | TT (O.TT)
  | FF (O.FF)
  (* weak bools *)
  | WBOOL (O.WBOOL)
  (* natural numbers *)
  | NAT (O.NAT)
  | ZERO (O.ZERO)
  (* integers *)
  | INT (O.INT)
  (* void *)
  | VOID (O.VOID)
  (* circle *)
  | S1 (O.S1)
  | BASE (O.BASE)


  | kind (O.KCONST kind)


(* built-in operators that do not have special form *)
regularMultinaryOperator
  (* bools *)
  : IF (O.IF)
  (* weak bools *)
  | WIF (O.WIF)
  (* natural numbers *)
  | SUCC (O.SUCC)
  | NAT_REC (O.NAT_REC)
  (* integers *)
  | NEGSUCC (O.NEGSUCC)
  | INT_REC (O.INT_REC)
  (* paths *)
  | PATH (O.PATH_TY)
  (* pushouts *)
  | PUSHOUT (O.PUSHOUT)
  | LEFT (O.LEFT)
  | RIGHT (O.RIGHT)
  | GLUE (O.GLUE)
  (* equality *)
  | EQUALS (O.EQUALITY)
  (* V *)
  | V (O.V)
  | VIN (O.VIN)
  | VPROJ (O.VPROJ)


customOpTerm
  : OPNAME (OPNAME, [])
  | LPAREN OPNAME bindings RPAREN (OPNAME, bindings)

patvar
  : PERCENT LSQUARE VARNAME COLON sort RSQUARE ((VARNAME, sort))
  | PERCENT VARNAME ((VARNAME, O.EXP))

patvarBindings
  : VARNAME COMMA patvarBindings (VARNAME :: patvarBindings)
  | VARNAME ([VARNAME])

rawTermAndTac
  : VARNAME (`` VARNAME)

  (* meta variable *)
  | metavar (Ast.$$# (metavar, []))
  | LPAREN metavar terms RPAREN (Ast.$$# (metavar, terms))

  (* pattern variables *)
  | patvar (Ast.$$ (O.PAT_META (#2 patvar), [\ ([], ``(#1 patvar)), \ ([], Multi.makeVec O.ANY [])]))
  | LPAREN patvar termsAnySort RPAREN (Ast.$$ (O.PAT_META (#2 patvar), [\ ([], ``(#1 patvar)), \ ([], Multi.makeVec O.ANY termsAnySort)]))

  (* custom operators *)
  | customOpTerm (makeCustom customOpTerm)

  (* built-in operators that can be handled uniformly *)
  | monoNullaryOperator (Ast.$$ (monoNullaryOperator, []))
  | LPAREN regularMultinaryOperator bindings RPAREN (Ast.$$ (regularMultinaryOperator, bindings))

  | LPAREN UNIVERSE level RPAREN (Ast.$$ (O.UNIVERSE, [Ast.\ ([], level), Ast.\ ([], Ast.$$ (O.KCONST RedPrlKind.top, []))]))
  | LPAREN UNIVERSE level term RPAREN (Ast.$$ (O.UNIVERSE, [Ast.\ ([], level), Ast.\ ([], term)]))

  | LPAREN LOOP dimension RPAREN (Ast.$$ (O.LOOP, [Ast.\ ([], dimension)]))
  | LPAREN DIM dimension RPAREN (dimension)

  (* Kan operators *)
  | LPAREN COE dir binding term RPAREN
    (Ast.$$ (O.COE, [Ast.\ ([], #1 dir), Ast.\ ([], #2 dir), binding, Ast.\ ([], term)]))
  | LPAREN FCOM dir binding tubeVec RPAREN
    (Ast.$$ (O.FCOM, [\ ([], #1 dir), \([], #2 dir), binding, \([], tubeVec)]))
  | LPAREN HCOM dir binding binding tubeVec RPAREN
    (Ast.$$ (O.HCOM, [\ ([], #1 dir), \([], #2 dir), binding1, binding2, \([], tubeVec)]))
  | LPAREN COM dir binding binding tubeVec RPAREN
    (Ast.$$ (O.COM, [\ ([], #1 dir), \([], #2 dir), binding1, binding2, \([], tubeVec)]))
  | LPAREN BOX dir binding boundaryVec RPAREN
    (Ast.$$ (O.BOX, [\ ([], #1 dir), \([], #2 dir), binding, \([], boundaryVec)]))
  | LPAREN CAP backDir binding tubeVec RPAREN
    (Ast.$$ (O.CAP, [\ ([], #1 backDir), \([], #2 backDir), binding, \([], tubeVec)]))

  (* numbers *)
  | NUMERAL (Multi.makeNum NUMERAL)

  (* function types *)
  | LPAREN RIGHT_ARROW quantifierData RPAREN (Multi.makeFun (#1 quantifierData) (#2 quantifierData))
  | LPAREN LAMBDA LSQUARE boundVars RSQUARE term RPAREN (Multi.makeLam boundVars term)
  | LPAREN DOLLAR_SIGN term terms RPAREN (Multi.makeApp term terms)

  (* pair types *)
  | LPAREN TIMES quantifierData RPAREN (Multi.makeProd (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) quantifierData)

  (* dependent record types *)
  | RECORD (Multi.makeRecord (Pos.pos (RECORD1left fileName) (RECORD1right fileName)) [])
  | LPAREN RECORD typedBinders RPAREN (Multi.makeRecord (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) typedBinders)
  | TUPLE (Multi.makeTuple (Pos.pos (TUPLE1left fileName) (TUPLE1right fileName)) [])
  | LPAREN TUPLE fields RPAREN (Multi.makeTuple (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) fields)
  | LPAREN TUPLE terms RPAREN (Multi.makeAnonymousTuple terms)
  | LPAREN BANG ident term RPAREN (Ast.$$ (O.PROJ ident, [\ ([], term)]))

  (* paths *)
  | LPAREN ABS LSQUARE boundVars RSQUARE term RPAREN (Multi.makePathAbs boundVars term)
  | LPAREN AT_SIGN term dimensions RPAREN (Multi.makePathApp term dimensions)

level
  : NUMERAL (Ast.$$ (O.LCONST NUMERAL, []))
  | LPAREN PLUS level NUMERAL RPAREN (Ast.$$ (O.LPLUS NUMERAL, [Ast.\ ([], level)]))
  | LPAREN DOUBLE_PLUS level RPAREN (Ast.$$ (O.LPLUS 1, [Ast.\ ([], level)]))
  | LPAREN LMAX levels RPAREN (Ast.$$ (O.LMAX, [\ ([], Multi.makeVec O.LVL levels)]))
  | LOMEGA (Ast.$$ (O.LOMEGA, []))
  | metavar (Ast.$$# (metavar, []))
  | PERCENT VARNAME (Ast.$$ (O.PAT_META O.LVL, [\ ([], ``VARNAME), \ ([], Multi.makeVec O.ANY [])]))

levels
  : level ([level])
  | levels level (level :: levels)

rawTerm
  : rawTermAndTac (rawTermAndTac)
  | HASH TAC LBRACKET tactic RBRACKET (tactic)
  | HASH JDG LBRACKET judgment RBRACKET (judgment)
  | HASH LVL LBRACKET level RBRACKET (level)

term : rawTerm (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)

terms
  : term ([term])
  | term terms (term :: terms)

kind
  : DISCRETE (O.K.DISCRETE)
  | KAN (O.K.KAN)
  | HCOM (O.K.HCOM)
  | COE (O.K.COE)
  | STABLE (O.K.STABLE)

withKindAtLevel
  : WITH term AT level (level, term)
  | AT level WITH term (level, term)
  | WITH term (Ast.$$ (O.LOMEGA, []), term)
  | AT level (level, Ast.$$ (O.KCONST (O.K.top), []))
  | (Ast.$$ (O.LOMEGA, []), Ast.$$ (O.KCONST (O.K.top), []))

rawJudgment
  : term EQUALS term IN term withKindAtLevel (Jdg.makeAtLvl O.JDG_EQ withKindAtLevel [term1, term2, term3])
  | term IN term withKindAtLevel (Jdg.makeAtLvl O.JDG_EQ withKindAtLevel [term1, term1, term2])
  | term TRUE withKindAtLevel (Jdg.makeAtLvl O.JDG_TRUE withKindAtLevel [term])
  | term withKindAtLevel (Jdg.makeAtLvl O.JDG_TRUE withKindAtLevel [term])
  | term EQUALS term TYPE withKindAtLevel (Jdg.makeAtLvl O.JDG_EQ_TYPE withKindAtLevel [term1, term2])
  | term TYPE withKindAtLevel (Jdg.makeAtLvl O.JDG_EQ_TYPE withKindAtLevel [term, term])
  | term SYNTH withKindAtLevel (Jdg.makeAtLvl O.JDG_SYNTH withKindAtLevel [term])

judgment : rawJudgment (annotate (Pos.pos (rawJudgment1left fileName) (rawJudgment1right fileName)) rawJudgment)

src_catjdg : judgment (judgment)

src_seqhyp
  : VARNAME COLON src_catjdg ((VARNAME, src_catjdg))
  | UNDER COLON src_catjdg (("_", src_catjdg))
  | src_catjdg (("_", src_catjdg))

src_seqhyps
  : src_seqhyp ([src_seqhyp])
  | src_seqhyp COMMA src_seqhyps (src_seqhyp :: src_seqhyps)
  | ([])

src_sequent
  : src_catjdg ([], src_catjdg)
  | src_seqhyps RANGLE RANGLE src_catjdg (src_seqhyps, src_catjdg)

recordFieldTactics
   : VARNAME EQUALS tactic COMMA recordFieldTactics ((VARNAME, tactic) :: recordFieldTactics)
   | VARNAME EQUALS tactic ([(VARNAME, tactic)])
   | ([])

devAppSpine
  : tactic COMMA devAppSpine (tactic :: devAppSpine)
  | tactic ([tactic])
  | ([])

bracketedDevAppSpine
  : LSQUARE devAppSpine RSQUARE (devAppSpine)
  | ([])

devDecompPattern
  : VARNAME (O.PAT_VAR VARNAME)
  | UNDER (O.PAT_VAR "_")
  | LBRACKET tupleDecompPattern RBRACKET (O.PAT_TUPLE tupleDecompPattern)

devDecompPatterns
  : devDecompPattern COMMA devDecompPatterns (devDecompPattern :: devDecompPatterns)
  | devDecompPattern ([devDecompPattern])

labeledDecompPattern
  : VARNAME EQUALS devDecompPattern (VARNAME, devDecompPattern)

labeledTupleDecompPattern
   : labeledDecompPattern COMMA labeledTupleDecompPattern (labeledDecompPattern :: labeledTupleDecompPattern)
   | labeledDecompPattern ([labeledDecompPattern])
   | ([])

anonTupleDecompPattern
   : devDecompPattern COMMA anonTupleDecompPattern (devDecompPattern :: anonTupleDecompPattern)
   | devDecompPattern ([devDecompPattern])

tupleDecompPattern
  : labeledTupleDecompPattern (labeledTupleDecompPattern)
  | anonTupleDecompPattern (Pattern.labelAnonTuplePattern anonTupleDecompPattern)

devMatchClause
  : LSQUARE patvarBindings PIPE termAnySort DOUBLE_RIGHT_ARROW tactic RSQUARE (patvarBindings, (termAnySort, tactic))
  | LSQUARE termAnySort DOUBLE_RIGHT_ARROW tactic RSQUARE ([], (termAnySort, tactic))

devMatchClauses
  : devMatchClause devMatchClauses (devMatchClause :: devMatchClauses)
  | ([])

selector
  : CONCL (Ast.$$ (O.SEL_CONCL, []))
  | elimTargetAnySort (Ast.$$ (O.SEL_HYP, [Ast.\ ([], elimTargetAnySort)]))

selectors
  : selector COMMA selectors (selector :: selectors)
  | selector ([selector])

bracketedSelectors
  : LSQUARE selectors RSQUARE (selectors)
  | selector ([selector])

opnames
  : OPNAME COMMA opnames (OPNAME :: opnames)
  | OPNAME ([OPNAME])

bracketedOpnames
  : LSQUARE opnames RSQUARE (opnames)
  | OPNAME ([OPNAME])

termAnySort
  : term (Ast.$$ (O.MK_ANY NONE, [Ast.\ ([], term)]))


termsAnySort
  : termAnySort ([termAnySort])
  | termAnySort termsAnySort (termAnySort :: termsAnySort)

elimTarget
  : VARNAME (``VARNAME)
  | metavar (Ast.$$# (metavar, []))

elimTargetAnySort
  : elimTarget (Ast.$$ (O.MK_ANY NONE, [Ast.\ ([], elimTarget)]))


atomicRawTac
  : REFINE VARNAME (Ast.$$ (O.RULE_PRIM VARNAME, []))
  | RULE_ID (Ast.$$ (O.RULE_ID, []))
  | RULE_AUTO_STEP (Ast.$$ (O.RULE_AUTO_STEP, []))
  | RULE_SYMMETRY (Ast.$$ (O.RULE_SYMMETRY, []))
  | RULE_ELIM elimTargetAnySort (Ast.$$ (O.RULE_ELIM, [Ast.\ ([], elimTargetAnySort)]))
  | RULE_REWRITE term (Ast.$$ (O.RULE_REWRITE, [Ast.\ ([], Ast.$$ (O.SEL_CONCL, [])), Ast.\ ([], term)]))
  | RULE_REWRITE term IN selector (Ast.$$ (O.RULE_REWRITE, [Ast.\ ([], selector), Ast.\ ([], term)]))
  | RULE_REWRITE_HYP elimTargetAnySort (Ast.$$ (O.RULE_REWRITE_HYP, [Ast.\ ([], Ast.$$ (O.SEL_CONCL, [])), Ast.\ ([], elimTargetAnySort)]))
  | RULE_REWRITE_HYP elimTargetAnySort IN selector (Ast.$$ (O.RULE_REWRITE_HYP, [Ast.\ ([], selector), Ast.\ ([], elimTargetAnySort)]))
  | RULE_REDUCE (Ast.$$ (O.RULE_REDUCE_ALL, []))
  | RULE_REDUCE IN bracketedSelectors (Ast.$$ (O.RULE_REDUCE, [Ast.\ ([], Multi.makeVec O.SEL bracketedSelectors)]))
  | RULE_UNFOLD bracketedOpnames (Ast.$$ (O.RULE_UNFOLD_ALL bracketedOpnames, []))
  | RULE_UNFOLD bracketedOpnames IN bracketedSelectors (Ast.$$ (O.RULE_UNFOLD (bracketedOpnames), [Ast.\ ([], Multi.makeVec O.SEL bracketedSelectors)]))

  | BACK_TICK termAnySort (Tac.exactAuto termAnySort)
  | RULE_EXACT termAnySort (Tac.exact termAnySort)

  | atomicTac DOUBLE_PIPE tactic %prec DOUBLE_PIPE (Tac.orElse (atomicTac, tactic))

  | LAMBDA devDecompPatterns DOT tactic (Pattern.makeLambda devDecompPatterns tactic)
  | LANGLE boundVars RANGLE tactic (Ast.$$ (O.DEV_PATH_INTRO (List.length boundVars), [\ (Multi.addUnderscores boundVars, tactic)]))
  | LBRACKET recordFieldTactics RBRACKET (Multi.recordIntro (Pos.pos (LBRACKET1left fileName) (RBRACKET1right fileName)) recordFieldTactics)
  | LBRACKET tactics RBRACKET (Multi.sigmaIntro tactics)
  
  | IF elimTarget THEN tactic ELSE tactic
      (Ast.$$ (O.DEV_BOOL_ELIM, [\ ([], elimTarget), \ ([], tactic1), \ ([], tactic2)]))

  | LET VARNAME COLON LSQUARE judgment RSQUARE EQUALS tactic DOT tactic
      (Ast.$$ (O.DEV_LET NONE, [\ ([], judgment), \ ([], tactic1), \([VARNAME], tactic2)]))

  | LET devDecompPattern EQUALS elimTargetAnySort bracketedDevAppSpine DOT tactic
      (Pattern.makeApplyHyp devDecompPattern elimTargetAnySort bracketedDevAppSpine tactic)

  | LET devDecompPattern EQUALS customOpTerm bracketedDevAppSpine DOT tactic (Pattern.makeApplyLemma devDecompPattern customOpTerm bracketedDevAppSpine tactic)

  | USE elimTargetAnySort bracketedDevAppSpine (Pattern.makeUseHyp elimTargetAnySort bracketedDevAppSpine)
  | USE customOpTerm bracketedDevAppSpine (Pattern.makeUseLemma customOpTerm bracketedDevAppSpine)

  | CASE elimTarget OF BASE DOUBLE_RIGHT_ARROW tactic PIPE LOOP VARNAME DOUBLE_RIGHT_ARROW tactic
      (Ast.$$ (O.DEV_S1_ELIM, [\ ([], elimTarget), \ ([], tactic1), \([VARNAME], tactic2)]))

  | MATCH termAnySort LBRACKET devMatchClauses RBRACKET (Tac.makeMatch termAnySort devMatchClauses)
  | QUERY VARNAME LEFT_ARROW selector DOT tactic (Ast.$$ (O.DEV_QUERY, [\ ([], selector), \ ([VARNAME], tactic)]))
  | PRINT termAnySort (Ast.$$ (O.DEV_PRINT, [\ ([], termAnySort)]))

  (* overlapping with term *)
  | rawTermAndTac (rawTermAndTac)

atomicTac : atomicRawTac (annotate (Pos.pos (atomicRawTac1left fileName) (atomicRawTac1right fileName)) atomicRawTac)

atomicRawMultitac
  : LSQUARE tactics RSQUARE (Ast.$$ (O.MTAC_EACH, [\([], Multi.makeVec O.TAC tactics)]))
  | HASH NUMERAL LBRACKET tactic RBRACKET (Ast.$$ (O.MTAC_FOCUS (IntInf.toInt NUMERAL), [\ ([], tactic)]))
  | MTAC_REPEAT LBRACKET multitac RBRACKET (Ast.$$ (O.MTAC_REPEAT, [\ ([], multitac)]))
  | MTAC_AUTO (Tac.autoMtac)
  | MTAC_PROGRESS LBRACKET multitac RBRACKET (Ast.$$ (O.MTAC_PROGRESS, [\ ([], multitac)]))
  | MTAC_REC VARNAME IN LBRACKET multitac RBRACKET (Ast.$$ (O.MTAC_REC, [\ ([VARNAME], multitac)]))
  | LPAREN multitac RPAREN (multitac)
  | FRESH hypBindings RIGHT_ARROW atomicRawMultitac SEMI multitac %prec LEFT_ARROW (Tac.makeSeq atomicRawMultitac hypBindings multitac)
  | atomicTac %prec SEMI (Ast.$$ (O.MTAC_ALL, [\ ([], atomicTac)]))
  | QUESTION ident (Ast.$$ (O.MTAC_HOLE (SOME ident), []))
  | QUESTION (Ast.$$ (O.MTAC_HOLE NONE, []))

atomicMultitac
  : atomicRawMultitac (annotate (Pos.pos (atomicRawMultitac1left fileName) (atomicRawMultitac1right fileName)) atomicRawMultitac)

rawMultitac
  : multitac SEMI atomicMultitac %prec SEMI (Tac.makeSeq multitac [] atomicMultitac)
  | atomicMultitac %prec SEMI (atomicMultitac)

multitac : rawMultitac (annotate (Pos.pos (rawMultitac1left fileName) (rawMultitac1right fileName)) rawMultitac)

hypBinding
  : VARNAME COLON sort (VARNAME, sort)
  | VARNAME (VARNAME, O.EXP)

hypBindings
  : hypBinding ([hypBinding])
  | hypBinding COMMA hypBindings %prec COMMA (hypBinding :: hypBindings)
  | ([])

rawTactic
  : multitac %prec SEMI (Tac.multitacToTac multitac)

tactic
  : rawTactic (annotate (Pos.pos (rawTactic1left fileName) (rawTactic1right fileName)) rawTactic)

tactics
  : tactic ([tactic])
  | tactic COMMA tactics (tactic :: tactics)

declArgument
  : metavar COLON valence ((metavar, valence))
  | metavar ((metavar, ([], O.EXP)))

declArguments
  : declArgument ([declArgument])
  | declArgument COMMA declArguments (declArgument :: declArguments)
  | ([])

declArgumentsParens
  : LPAREN declArguments RPAREN (declArguments)
  | ([])

decl
  : DCL_DEF OPNAME declArgumentsParens COLON sort EQUALS LSQUARE term RSQUARE
      (OPNAME, Signature.DEF {arguments = declArgumentsParens, definiens = term, sort = sort}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_DEF OPNAME declArgumentsParens EQUALS LSQUARE term RSQUARE
      (OPNAME, Signature.DEF {arguments = declArgumentsParens, definiens = term, sort = O.EXP}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_TAC OPNAME declArgumentsParens EQUALS LSQUARE tactic RSQUARE
      (OPNAME, Signature.TAC {arguments = declArgumentsParens, script = tactic}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_THM OPNAME declArgumentsParens COLON LSQUARE src_sequent RSQUARE BY LSQUARE tactic RSQUARE
      (OPNAME, Signature.THM {arguments = declArgumentsParens, goal = src_sequent, script = tactic}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))

rawCmd
  : CMD_PRINT OPNAME (Signature.PRINT OPNAME)
  | CMD_EXTRACT OPNAME (Signature.EXTRACT OPNAME)

cmd : rawCmd (rawCmd, (Pos.pos (rawCmd1left fileName) (rawCmd1right fileName)))

elt
  : cmd (Signature.CMD cmd)
  | decl (Signature.DECL decl)
